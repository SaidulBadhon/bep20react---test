{"version":3,"file":"bnc-sdk.es5.js","sources":["../src/state.ts","../src/utilities.ts","../src/messages.ts","../src/validation.ts","../src/transaction.ts","../src/account.ts","../src/event.ts","../src/bnc-sdk.ts"],"sourcesContent":["import { Session } from './interfaces'\n\nexport let session: Session = {\n  socket: null,\n  pendingSocketConnection: false,\n  socketConnection: false,\n  networkId: 1,\n  dappId: '',\n  connectionId: '',\n  clients: [],\n  status: {\n    nodeSynced: true,\n    connected: false\n  }\n}\n","import { version } from '../package.json'\nimport { session } from './state'\n\nimport { Emitter, EventObject, NotificationObject } from './interfaces'\n\nexport function createEmitter(): Emitter {\n  return {\n    listeners: {},\n    on: function(eventCode, listener) {\n      // check if valid eventCode\n      switch (eventCode) {\n        case 'txSent':\n        case 'txPool':\n        case 'txConfirmed':\n        case 'txSpeedUp':\n        case 'txCancel':\n        case 'txFailed':\n        case 'all':\n          break\n        default:\n          throw new Error(\n            `${eventCode} is not a valid event code, for a list of valid event codes see: https://github.com/blocknative/sdk`\n          )\n      }\n\n      // check that listener is a function\n      if (typeof listener !== 'function') {\n        throw new Error('Listener must be a function')\n      }\n\n      // add listener for the eventCode\n      this.listeners[eventCode] = listener\n    },\n    emit: function(state) {\n      if (this.listeners[state.eventCode]) {\n        return this.listeners[state.eventCode](state)\n      }\n\n      if (this.listeners.all) {\n        return this.listeners.all(state)\n      }\n    }\n  }\n}\n\nexport function createEventLog(msg: EventObject): string {\n  const { dappId, networkId } = session\n\n  return JSON.stringify({\n    timeStamp: new Date(),\n    dappId,\n    version,\n    blockchain: {\n      system: 'ethereum',\n      network: networkName(networkId)\n    },\n    ...msg\n  })\n}\n\nexport function networkName(id: number): string {\n  switch (id) {\n    case 1:\n      return 'main'\n    case 3:\n      return 'ropsten'\n    case 4:\n      return 'rinkeby'\n    case 5:\n      return 'goerli'\n    case 42:\n      return 'kovan'\n    default:\n      return 'local'\n  }\n}\n\nexport function serverEcho(eventCode: string): boolean {\n  switch (eventCode) {\n    case 'txRequest':\n    case 'nsfFail':\n    case 'txRepeat':\n    case 'txAwaitingApproval':\n    case 'txConfirmReminder':\n    case 'txSendFail':\n    case 'txError':\n    case 'txUnderPriced':\n    case 'txSent':\n      return true\n    default:\n      return false\n  }\n}\n\nexport function last(\n  arr: (undefined | boolean | NotificationObject)[]\n): undefined | boolean | NotificationObject {\n  return arr.reverse()[0]\n}\n","import { session } from './state'\nimport { createEventLog, networkName, serverEcho, last } from './utilities'\n\nimport { Ac, Tx, Emitter, EventObject, TransactionHandler, Client } from './interfaces'\n\nexport function sendMessage(msg: EventObject) {\n  session.socket.send(createEventLog(msg))\n}\n\nexport function handleMessage(msg: { data: string }): void {\n  const { status, reason, event, nodeSyncStatus, connectionId } = JSON.parse(msg.data)\n\n  if (connectionId) {\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem('connectionId', connectionId)\n    } else {\n      session.connectionId = connectionId\n    }\n  }\n\n  // handle node sync status change\n  if (\n    nodeSyncStatus !== undefined &&\n    nodeSyncStatus.blockchain === 'ethereum' &&\n    nodeSyncStatus.network === networkName(session.networkId)\n  ) {\n    session.status.nodeSynced = nodeSyncStatus.synced\n  }\n\n  // handle any errors from the server\n  if (status === 'error') {\n    if (reason.includes('not a valid API key')) {\n      const errorObj = new Error(reason)\n      throw errorObj\n    }\n\n    if (reason.includes('network not supported')) {\n      const errorObj = new Error(reason)\n      throw errorObj\n    }\n\n    if (reason.includes('maximum allowed amount')) {\n      const errorObj = new Error(reason)\n      throw errorObj\n    }\n  }\n\n  if (event && event.transaction) {\n    const { transaction, eventCode, contractCall } = event\n\n    // flatten in to one object\n    const newState = { ...transaction, eventCode, contractCall }\n\n    // ignore server echo messages\n    if (serverEcho(eventCode)) {\n      return\n    }\n\n    // handle change of hash in speedup and cancel events\n    if (eventCode === 'txSpeedUp' || eventCode === 'txCancel') {\n      session.clients.forEach((client: Client) => {\n        client.transactions = client.transactions.map((tx: Tx) => {\n          if (tx.hash === transaction.originalHash) {\n            // reassign hash parameter in transaction queue to new hash\n            tx.hash = transaction.hash\n          }\n          return tx\n        })\n      })\n    }\n\n    const watchedAddress = transaction.watchedAddress && transaction.watchedAddress.toLowerCase()\n\n    if (watchedAddress) {\n      session.clients.forEach((client: Client) => {\n        const { transactionHandlers, accounts } = client\n\n        const accountObj = accounts.find((ac: Ac) => ac.address === watchedAddress)\n\n        // no accountObj then this client isn't concerned with this notification\n        if (!accountObj) return\n\n        let emitterResult =\n          accountObj && last(accountObj.emitters.map((emitter: Emitter) => emitter.emit(newState)))\n\n        transactionHandlers.forEach((handler: TransactionHandler) =>\n          handler({ transaction: newState, emitterResult })\n        )\n      })\n    } else {\n      session.clients.forEach((client: Client) => {\n        const { transactionHandlers, transactions } = client\n\n        const transactionObj = transactions.find((tx: Tx) => tx.hash === transaction.hash)\n\n        // no transactionObj then this client isn't concerned with this notification\n        if (!transactionObj) return\n\n        let emitterResult = transactionObj && transactionObj.emitter.emit(newState)\n\n        transactionHandlers.forEach((handler: TransactionHandler) =>\n          handler({ transaction: newState, emitterResult })\n        )\n      })\n    }\n  }\n}\n","import { EventObject } from './interfaces'\n\nexport function validateType(options: {\n  name: string\n  value: any\n  type: string\n  optional?: boolean\n  customValidation?: (val: any) => boolean\n}): never | void {\n  const { name, value, type, optional, customValidation } = options\n\n  if (!optional && typeof value === 'undefined') {\n    throw new Error(`\"${name}\" is required`)\n  }\n\n  if (\n    typeof value !== 'undefined' &&\n    (type === 'array' ? Array.isArray(type) : typeof value !== type)\n  ) {\n    throw new Error(\n      `\"${name}\" must be of type: ${type}, received type: ${typeof value} from value: ${value}`\n    )\n  }\n\n  if (typeof value !== 'undefined' && customValidation && !customValidation(value)) {\n    throw new Error(`\"${value}\" is not a valid \"${name}\"`)\n  }\n}\n\nexport function validateOptions(options: any): never | void {\n  validateType({ name: 'sdk options', value: options, type: 'object' })\n\n  const { dappId, networkId, transactionHandler, apiUrl, ws } = options\n\n  validateType({ name: 'dappId', value: dappId, type: 'string' })\n  validateType({ name: 'networkId', value: networkId, type: 'number' })\n  validateType({\n    name: 'transactionHandler',\n    value: transactionHandler,\n    type: 'function',\n    optional: true\n  })\n  validateType({ name: 'apiUrl', value: apiUrl, type: 'string', optional: true })\n  validateType({ name: 'ws', value: ws, type: 'function', optional: true })\n}\n\nexport function validateTransaction(clientIndex: number, hash: string, id?: string): never | void {\n  validateType({ name: 'clientIndex', value: clientIndex, type: 'number' })\n  validateType({ name: 'hash', value: hash, type: 'string', customValidation: validTxHash })\n  validateType({ name: 'id', value: id, type: 'string', optional: true })\n}\n\nexport function validateAccount(clientIndex: number, address: string): never | void {\n  validateType({ name: 'clientIndex', value: clientIndex, type: 'number' })\n  validateType({ name: 'address', value: address, type: 'string', customValidation: isAddress })\n}\n\nexport function validateEvent(eventObj: EventObject): never | void {\n  validateType({ name: 'eventObj', value: eventObj, type: 'object' })\n\n  const { eventCode, categoryCode, transaction, wallet, contract } = eventObj\n\n  validateType({ name: 'eventCode', value: eventCode, type: 'string' })\n  validateType({ name: 'categoryCode', value: categoryCode, type: 'string' })\n\n  validateType({ name: 'transaction', value: transaction, type: 'object', optional: true })\n\n  if (transaction) {\n    const { id, to, from, value, gas, gasPrice, nonce, status, startTime } = transaction\n\n    validateType({ name: 'id', value: id, type: 'string', optional: true })\n    validateType({\n      name: 'to',\n      value: to,\n      type: 'string',\n      optional: true,\n      customValidation: isAddress\n    })\n    validateType({\n      name: 'from',\n      value: from,\n      type: 'string',\n      optional: true,\n      customValidation: isAddress\n    })\n    validateType({ name: 'value', value: value, type: 'string', optional: true })\n    validateType({ name: 'gas', value: gas, type: 'string', optional: true })\n    validateType({ name: 'gasPrice', value: gasPrice, type: 'string', optional: true })\n    validateType({ name: 'nonce', value: nonce, type: 'number', optional: true })\n    validateType({ name: 'status', value: status, type: 'string', optional: true })\n    validateType({ name: 'startTime', value: startTime, type: 'number', optional: true })\n  }\n\n  validateType({ name: 'wallet', value: wallet, type: 'object', optional: true })\n\n  if (wallet) {\n    const { balance } = wallet\n    validateType({ name: 'balance', value: balance, type: 'string', optional: true })\n  }\n\n  validateType({ name: 'contract', value: contract, type: 'object', optional: true })\n\n  if (contract) {\n    const { methodName, parameters } = contract\n    validateType({ name: 'methodName', value: methodName, type: 'string', optional: true })\n    validateType({ name: 'parameters', value: parameters, type: 'array', optional: true })\n  }\n}\n\nfunction isAddress(address: string): boolean {\n  return /^(0x)?[0-9a-fA-F]{40}$/.test(address)\n}\n\nfunction validTxHash(hash: string): boolean {\n  return /^0x([A-Fa-f0-9]{64})$/.test(hash)\n}\n","import { createEmitter } from './utilities'\nimport { session } from './state'\nimport { sendMessage } from './messages'\n\nimport { Emitter, TransactionLog, TransactionHandler } from './interfaces'\nimport { validateTransaction } from './validation'\n\nfunction transaction(clientIndex: number, hash: string, id: undefined | string) {\n  validateTransaction(clientIndex, hash, id)\n\n  // create startTime for transaction\n  const startTime: number = Date.now()\n\n  // create emitter for transaction\n  const emitter: Emitter = createEmitter()\n\n  // create eventCode for transaction\n  const eventCode: string = 'txSent'\n\n  const client = session.clients[clientIndex]\n\n  // put in queue\n  client.transactions.push({\n    hash,\n    emitter\n  })\n\n  const transaction: TransactionLog = {\n    hash,\n    id: id || hash,\n    startTime,\n    status: 'sent'\n  }\n\n  const newState = {\n    ...transaction,\n    eventCode\n  }\n\n  // logEvent to server\n  sendMessage({\n    eventCode,\n    categoryCode: 'activeTransaction',\n    transaction\n  })\n\n  const transactionObj = {\n    details: transaction,\n    emitter\n  }\n\n  // emit after delay to allow for listener to be registered\n  setTimeout(() => {\n    const emitterResult = emitter.emit(newState)\n    client.transactionHandlers.forEach((handler: TransactionHandler) =>\n      handler({ transaction: newState, emitterResult })\n    )\n  }, 5)\n\n  return transactionObj\n}\n\nexport default transaction\n","import { createEmitter } from './utilities'\nimport { session } from './state'\nimport { sendMessage } from './messages'\n\nimport { Emitter, Ac } from './interfaces'\nimport { validateAccount } from './validation'\n\nfunction account(\n  clientIndex: number,\n  address: string\n): { emitter: Emitter; details: { address: string } } {\n  validateAccount(clientIndex, address)\n\n  // lowercase the address\n  address = address.toLowerCase()\n\n  // create emitter for transaction\n  const emitter: Emitter = createEmitter()\n\n  // create eventCode for transaction\n  const eventCode: string = 'accountAddress'\n\n  const existingAddressWatcher = session.clients[clientIndex].accounts.find(\n    (ac: Ac) => ac.address === address\n  )\n\n  if (existingAddressWatcher) {\n    // add to existing emitters array\n    existingAddressWatcher.emitters.push(emitter)\n  } else {\n    // put in accounts queue\n    session.clients[clientIndex].accounts.push({\n      address,\n      emitters: [emitter]\n    })\n  }\n\n  // logEvent to server\n  sendMessage({\n    eventCode,\n    categoryCode: 'watch',\n    account: {\n      address\n    }\n  })\n\n  return {\n    emitter,\n    details: {\n      address\n    }\n  }\n}\n\nexport default account\n","import { sendMessage } from './messages'\n\nimport { EventObject } from './interfaces'\nimport { validateEvent } from './validation'\n\nfunction event(eventObj: EventObject): void {\n  validateEvent(eventObj)\n  sendMessage(eventObj)\n}\n\nexport default event\n","import SturdyWebSocket from 'sturdy-websocket'\n\nimport transaction from './transaction'\nimport account from './account'\nimport event from './event'\n\nimport { sendMessage, handleMessage } from './messages'\nimport { session } from './state'\n\nimport { InitializationOptions, Ac, API, Client } from './interfaces'\nimport { validateOptions } from './validation'\n\nlet clientIndex: number = 0\n\nexport default function sdk(options: InitializationOptions): API {\n  validateOptions(options)\n\n  const { dappId, networkId, transactionHandlers = [], apiUrl, ws } = options\n  const alreadyConnected = !!session.socket\n\n  session.dappId = dappId\n  session.networkId = networkId\n  session.clients.push({\n    transactionHandlers,\n    transactions: [],\n    accounts: []\n  })\n\n  if (!alreadyConnected) {\n    if (ws) {\n      session.socket = new SturdyWebSocket(apiUrl || 'wss://api.blocknative.com/v0', {\n        wsConstructor: ws\n      })\n    } else {\n      session.socket = new SturdyWebSocket(apiUrl || 'wss://api.blocknative.com/v0')\n    }\n\n    session.socket.onopen = () => {\n      session.status.connected = true\n\n      const connectionId =\n        (typeof window !== 'undefined' && window.localStorage.getItem('connectionId')) ||\n        session.connectionId\n\n      sendMessage({\n        categoryCode: 'initialize',\n        eventCode: 'checkDappId',\n        connectionId\n      })\n    }\n\n    session.socket.ondown = () => {\n      session.status.connected = false\n    }\n\n    session.socket.onreopen = () => {\n      session.status.connected = true\n\n      const connectionId =\n        (typeof window !== 'undefined' && window.localStorage.getItem('connectionId')) ||\n        session.connectionId\n\n      sendMessage({\n        categoryCode: 'initialize',\n        eventCode: 'checkDappId',\n        connectionId\n      })\n\n      // re-register all accounts to be watched by server upon\n      // re-connection as they don't get transferred over automatically\n      // to the new connection like tx hashes do\n      session.clients.forEach((client: Client) => {\n        client.accounts.forEach((account: Ac) => {\n          sendMessage({\n            eventCode: 'accountAddress',\n            categoryCode: 'watch',\n            account: {\n              address: account.address\n            }\n          })\n        })\n      })\n    }\n\n    session.socket.onmessage = handleMessage\n  }\n  return {\n    transaction,\n    account,\n    event,\n    status: session.status,\n    clientIndex: clientIndex++\n  }\n}\n"],"names":[],"mappings":"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"}