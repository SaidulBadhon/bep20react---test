{"ast":null,"code":"var _jsxFileName = \"/Users/saidulbadhon/Desktop/bep20tokengen/bep20react/src/token_admin.js\",\n    _s = $RefreshSig$();\n\nimport { Button, TextField, Typography, Grid, Paper, Radio } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useState } from \"react\";\nimport { getOwner, getTrxtax, initMint, initBurn, initTaxChange, initburnFeeChange, initTaxAddressChange } from './contractFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  appBarroot: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  },\n  paperI: {\n    paddingTop: '5vh',\n    width: '50vw',\n    height: '40vh',\n    borderTopLeftRadius: '30px',\n    borderBottomLeftRadius: '30px',\n    background: 'linear-gradient(0deg,#1e3c72 0,#1e3c72 1%,#2a5298)'\n  },\n  paperII: {\n    paddingTop: '5vh',\n    paddingBottom: '5vh',\n    width: '30vw',\n    borderTopRightRadius: '30px',\n    borderBottomRightRadius: '30px'\n  },\n  bodyroot: {\n    background: '#E8E8E8'\n  },\n  paperfields: {\n    marginBottom: '10px',\n    paddingBottom: '10px'\n  },\n  whiteheader: {\n    color: 'white'\n  },\n  textborder: {\n    \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"white\"\n    },\n    \"&:hover .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"white\"\n    },\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"white\"\n    },\n    'color': 'white'\n  }\n}));\n\nconst locoprint = l => {\n  console.log(l);\n};\n\nconst ManageToken = props => {\n  _s();\n\n  const classes = useStyles();\n  const web3 = props.data;\n  const address = props.address;\n  const [tokenAddress, setTokenAddress] = useState('');\n  const [successCheck, setsuccessCheck] = useState(false);\n  const [taxed, setTaxed] = useState(false);\n  const [mint, setMint] = useState();\n  const [burn, setBurn] = useState();\n  const [tax, setTax] = useState();\n  const [burnFee, setBurnFee] = useState();\n  const [txaddress, setTxaddress] = useState();\n\n  const CheckTax = () => {\n    if (taxed) {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        alignItems: \"center\",\n        justify: \"center\",\n        spacing: 1,\n        className: classes.paperfields,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            id: \"setTax\",\n            label: \"set Tax\",\n            type: \"string\",\n            variant: \"outlined\",\n            InputLabelProps: {\n              shrink: true\n            },\n            value: tax,\n            onChange: e => {\n              setTax(e.target.value);\n            },\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"primary\",\n            onClick: async () => {\n              let tx = await initTaxChange(web3, tokenAddress, tax, address);\n\n              if (tx) {\n                alert(\"Tax changed successfully\");\n              }\n            },\n            children: \"                  Change Tax\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            id: \"setTax\",\n            label: \"set BurnFee\",\n            type: \"string\",\n            variant: \"outlined\",\n            InputLabelProps: {\n              shrink: true\n            },\n            value: burnFee,\n            onChange: e => {\n              setBurnFee(e.target.value);\n            },\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"primary\",\n            onClick: async () => {\n              let tx = await initburnFeeChange(web3, tokenAddress, burnFee, address);\n\n              if (tx) {\n                alert(\"Burn Fee changed successfully\");\n              }\n            },\n            children: \"                  Change Fee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            id: \"setTax\",\n            label: \"set Address\",\n            type: \"string\",\n            variant: \"outlined\",\n            InputLabelProps: {\n              shrink: true\n            },\n            value: txaddress,\n            onChange: e => {\n              setTxaddress(e.target.value);\n            },\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"primary\",\n            onClick: async () => {\n              let tx = await initTaxAddressChange(web3, tokenAddress, txaddress, address);\n\n              if (tx) {\n                alert(\"Tax Address changed successfully\");\n              }\n            },\n            children: \"                  Change Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  const ChangePaper = () => {\n    if (successCheck) {\n      return /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.paperII,\n        elevation: 10,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          alignItems: \"center\",\n          justify: \"center\",\n          spacing: 1,\n          className: classes.paperfields,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"mint\",\n              label: \"Mint\",\n              type: \"string\",\n              variant: \"outlined\",\n              InputLabelProps: {\n                shrink: true\n              },\n              value: mint,\n              onChange: e => {\n                setMint(e.target.value);\n              },\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              color: \"primary\",\n              onClick: async () => {\n                let tx = await initMint(web3, tokenAddress, mint, address);\n\n                if (tx) {\n                  alert(\"Minted successfully\");\n                }\n              },\n              children: \"Mint\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          alignItems: \"center\",\n          justify: \"center\",\n          spacing: 1,\n          className: classes.paperfields,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"burn\",\n              label: \"Burn\",\n              type: \"string\",\n              variant: \"outlined\",\n              InputLabelProps: {\n                shrink: true\n              },\n              value: burn,\n              onChange: e => {\n                setBurn(e.target.value);\n              },\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              color: \"primary\",\n              onClick: async () => {\n                let tx = await initBurn(web3, tokenAddress, burn, address);\n\n                if (tx) {\n                  alert(\"Burned successfully\");\n                }\n              },\n              children: \"Burn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), CheckTax()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    alignItems: \"center\",\n    justify: \"center\",\n    style: {\n      minHeight: \"100vh\"\n    },\n    spacing: 1,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      width: 300,\n      item: true,\n      xs: \"auto\",\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.paperI,\n        elevation: 10,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          direction: \"column\",\n          justifyContent: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes.whiteheader,\n            style: {\n              \"fontSize\": \"18px\"\n            },\n            children: \"Enter Token Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            alignItems: \"center\",\n            justify: \"center\",\n            \"className-\": classes.paperfields,\n            spacing: 3,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 8,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"token_address\",\n                label: \"Token Address\",\n                type: \"string\",\n                variant: \"outlined\",\n                InputLabelProps: {\n                  shrink: true,\n                  style: {\n                    color: 'white'\n                  }\n                },\n                InputProps: {\n                  classes: {\n                    textborder: classes.textborder\n                  },\n                  style: {\n                    color: 'white'\n                  }\n                },\n                className: classes.textborder,\n                value: tokenAddress,\n                onChange: e => {\n                  setTokenAddress(e.target.value);\n                },\n                fullWidth: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 8,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                style: {\n                  'background': \"white\",\n                  'color': 'blue'\n                },\n                onClick: async () => {\n                  const owner = await getOwner(web3, tokenAddress);\n\n                  if (owner == address) {\n                    const tax = await getTrxtax(web3, tokenAddress);\n\n                    if (tax) {\n                      setTaxed(true);\n                    }\n\n                    setsuccessCheck(true);\n                  } else {\n                    alert(\"You are not the owner or this contract was not created here.\");\n                    setsuccessCheck(false);\n                  }\n                },\n                children: \"Manage\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      width: 300,\n      item: true,\n      xs: \"auto\",\n      children: ChangePaper()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ManageToken, \"TSJpABtVpmhLUCwJp8iGeMvBx5M=\", false, function () {\n  return [useStyles];\n});\n\n_c = ManageToken;\nexport default ManageToken;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManageToken\");","map":{"version":3,"sources":["/Users/saidulbadhon/Desktop/bep20tokengen/bep20react/src/token_admin.js"],"names":["Button","TextField","Typography","Grid","Paper","Radio","makeStyles","useState","getOwner","getTrxtax","initMint","initBurn","initTaxChange","initburnFeeChange","initTaxAddressChange","useStyles","theme","appBarroot","flexGrow","menuButton","marginRight","spacing","title","paperI","paddingTop","width","height","borderTopLeftRadius","borderBottomLeftRadius","background","paperII","paddingBottom","borderTopRightRadius","borderBottomRightRadius","bodyroot","paperfields","marginBottom","whiteheader","color","textborder","borderColor","locoprint","l","console","log","ManageToken","props","classes","web3","data","address","tokenAddress","setTokenAddress","successCheck","setsuccessCheck","taxed","setTaxed","mint","setMint","burn","setBurn","tax","setTax","burnFee","setBurnFee","txaddress","setTxaddress","CheckTax","shrink","e","target","value","tx","alert","ChangePaper","minHeight","style","owner"],"mappings":"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","sourcesContent":["import { Button, TextField, Typography, Grid, Paper, Radio} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useState } from \"react\";\nimport {getOwner,getTrxtax,initMint,initBurn,initTaxChange,initburnFeeChange,initTaxAddressChange} from './contractFunctions'\n\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    appBarroot: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    paperI: {\n      paddingTop:'5vh',\n      width:'50vw',\n      height:'40vh',\n      borderTopLeftRadius:'30px',\n      borderBottomLeftRadius:'30px',\n      background: 'linear-gradient(0deg,#1e3c72 0,#1e3c72 1%,#2a5298)'\n    },\n    paperII: {\n      paddingTop:'5vh',\n      paddingBottom:'5vh',\n      width:'30vw',\n      borderTopRightRadius:'30px',\n      borderBottomRightRadius:'30px'\n    },\n    bodyroot: {\n      background: '#E8E8E8'\n    },\n    paperfields: {\n      marginBottom: '10px',\n      paddingBottom: '10px'\n    },\n    whiteheader: {\n      color: 'white'\n    },\n    textborder:{\n      \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"white\"\n      },\n      \"&:hover .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"white\"\n      },\n      \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"white\"\n      },\n      'color':'white'\n    }\n  }));\n\nconst locoprint = (l) => {\n  console.log(l)\n}\n      \nconst ManageToken = (props) => {\n    const classes = useStyles();\n    const web3 = props.data\n    const address = props.address\n    const[tokenAddress,setTokenAddress] = useState('')\n    const[successCheck,setsuccessCheck] = useState(false)\n    const[taxed,setTaxed] = useState(false)\n    const[mint,setMint] = useState()\n    const[burn,setBurn] = useState()\n    const[tax,setTax] = useState()\n    const[burnFee,setBurnFee] = useState()\n    const[txaddress,setTxaddress] = useState()\n\n    const CheckTax = () => {\n      if (taxed) {\n      return(\n        <Grid container\n              alignItems='center'\n              justify='center'\n              spacing={1}\n              className={classes.paperfields}\n              >\n              <Grid item xs={6}>\n                <TextField\n                id=\"setTax\"\n                label=\"set Tax\"\n                type=\"string\"\n                variant=\"outlined\"\n                InputLabelProps={{\n                shrink: true,\n                }}\n                value={tax}\n                onChange={(e) => {\n                  setTax(e.target.value)\n                }}\n                fullWidth\n                />\n              </Grid>\n              <Grid item xs={3}>\n              <Button \n                  variant=\"outlined\" \n                  color=\"primary\"\n                  onClick = {async() => {\n                    let tx = await initTaxChange(web3, tokenAddress, tax, address)\n                    if (tx){\n                      alert(\"Tax changed successfully\")\n                    }\n                  }}\n                  >                  Change Tax\n                </Button>\n              </Grid>  \n              <Grid item xs={6}>\n                <TextField\n                id=\"setTax\"\n                label=\"set BurnFee\"\n                type=\"string\"\n                variant=\"outlined\"\n                InputLabelProps={{\n                shrink: true,\n                }}\n                value={burnFee}\n                onChange={(e) => {\n                  setBurnFee(e.target.value)\n                }}\n                fullWidth\n                />\n              </Grid>\n              <Grid item xs={3}>\n              <Button \n                  variant=\"outlined\" \n                  color=\"primary\"\n                  onClick = {async() => {\n                    let tx = await initburnFeeChange(web3, tokenAddress, burnFee, address)\n                    if (tx){\n                      alert(\"Burn Fee changed successfully\")\n                    }\n                  }}\n                  >                  Change Fee\n                </Button>\n              </Grid>\n              <Grid item xs={6}>\n                <TextField\n                id=\"setTax\"\n                label=\"set Address\"\n                type=\"string\"\n                variant=\"outlined\"\n                InputLabelProps={{\n                shrink: true,\n                }}\n                value={txaddress}\n                onChange={(e) => {\n                  setTxaddress(e.target.value)\n                }}\n                fullWidth\n                />\n              </Grid>\n              <Grid item xs={3}>\n              <Button \n                  variant=\"outlined\" \n                  color=\"primary\"\n                  onClick = {async() => {\n                    let tx = await initTaxAddressChange(web3, tokenAddress, txaddress, address)\n                    if (tx){\n                      alert(\"Tax Address changed successfully\")\n                    }\n                  }}\n                  >                  Change Address\n                </Button>\n              </Grid>    \n            </Grid> \n              \n      )}\n    }\n    const ChangePaper = () => {\n      if (successCheck){\n      return(\n        <Paper className={classes.paperII} elevation={10}>\n           <Grid container\n              alignItems='center'\n              justify='center'\n              spacing={1}\n              className={classes.paperfields}\n              >\n              <Grid item xs={6}>\n                <TextField\n                id=\"mint\"\n                label=\"Mint\"\n                type=\"string\"\n                variant=\"outlined\"\n                InputLabelProps={{\n                shrink: true,\n                }}\n                value={mint}\n                onChange={(e) => {\n                  setMint(e.target.value)\n                }}\n                fullWidth\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <Button \n                  variant=\"outlined\" \n                  color=\"primary\"\n                  onClick = {async() => {\n                    let tx = await initMint(web3, tokenAddress, mint, address)\n                    if (tx){\n                      alert(\"Minted successfully\")\n                    }\n                  }}\n                  >\n                  Mint\n                </Button>\n              </Grid>  \n            </Grid>\n            <Grid container\n              alignItems='center'\n              justify='center'\n              spacing={1}\n              className={classes.paperfields}\n              >\n              <Grid item xs={6}>\n                <TextField\n                id=\"burn\"\n                label=\"Burn\"\n                type=\"string\"\n                variant=\"outlined\"\n                InputLabelProps={{\n                shrink: true,\n                }}\n                value={burn}\n                onChange={(e) => {\n                  setBurn(e.target.value)\n                }}\n                fullWidth\n                />\n              </Grid>\n              <Grid item xs={3}>\n              <Button \n                  variant=\"outlined\" \n                  color=\"primary\"\n                  onClick = {async() => {\n                    let tx = await initBurn(web3, tokenAddress, burn, address)\n                    if (tx){\n                      alert(\"Burned successfully\")\n                    }\n                  }}\n                  >\n                  Burn\n                </Button>\n              </Grid>  \n            </Grid>\n            {CheckTax()}\n        </Paper>\n        \n      )\n      }\n    }\n\n    return(\n        <Grid container\n        alignItems='center'\n        justify='center'\n        style={{ minHeight: \"100vh\" }}\n        spacing={1}\n        >\n            <Grid width={300} item xs=\"auto\" >\n                <Paper className={classes.paperI} elevation={10}>\n                    <Grid direction=\"column\" justifyContent=\"center\">\n                    <p className={classes.whiteheader} style={{\"fontSize\":\"18px\"}}>Enter Token Address</p>\n                    <br />\n                    <Grid container\n                        alignItems='center'\n                        justify='center'\n                        className-={classes.paperfields}\n                        spacing = {3}\n                        >\n                    <Grid item xs={8}>\n                    <TextField\n                        id=\"token_address\"\n                        label=\"Token Address\"\n                        type=\"string\"\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                        shrink: true,\n                        style: {color : 'white'}\n                        }}\n                        InputProps = {{\n                          classes:{\n                            textborder: classes.textborder,\n                          },\n                          style: {color : 'white'}\n                        }}\n                        className = {classes.textborder}\n                        value={tokenAddress}\n                        onChange={(e) => {\n                            setTokenAddress(e.target.value)\n                        }}\n                        fullWidth\n                    />\n                    </Grid>\n                    <Grid item xs={8}>\n                        <Button \n                          variant=\"outlined\" \n                          style={{'background':\"white\",'color':'blue'}}\n                          onClick = {async() =>{\n                            const owner = await getOwner(web3,tokenAddress)\n                            if (owner == address){\n                              const tax = await getTrxtax(web3,tokenAddress)\n                              if (tax){\n                                setTaxed(true)\n                              }\n                              setsuccessCheck(true)\n                            }\n                            else{\n                              alert(\"You are not the owner or this contract was not created here.\")\n                              setsuccessCheck(false)\n                            }\n                          }}\n                          >\n                            Manage\n                        </Button>\n                    </Grid>\n\n                    </Grid>\n\n                    </Grid>\n                </Paper>\n\n            </Grid>\n            <Grid width={300} item xs='auto'>\n                {ChangePaper()}\n            </Grid>\n\n\n        </Grid>\n    )\n\n}    \n  export default ManageToken\n"]},"metadata":{},"sourceType":"module"}