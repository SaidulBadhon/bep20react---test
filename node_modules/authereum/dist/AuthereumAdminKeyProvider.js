"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_provider_engine_1 = __importDefault(require("web3-provider-engine"));
const hooked_wallet_1 = __importDefault(require("web3-provider-engine/subproviders/hooked-wallet"));
const rpc_1 = __importDefault(require("web3-provider-engine/subproviders/rpc"));
const web3Utils = __importStar(require("web3-utils"));
const utils = __importStar(require("./utils"));
class AuthereumAdminKeyProvider extends web3_provider_engine_1.default {
    constructor(adminPrivateKey, networkUrl) {
        super();
        this.adminPrivateKey = adminPrivateKey;
        this.rpcUri = networkUrl;
        this.isAuthereum = true;
        this.initSubprovider();
    }
    initSubprovider() {
        const _super = Object.create(null, {
            addProvider: { get: () => super.addProvider },
            on: { get: () => super.on },
            start: { get: () => super.start }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const walletSubprovider = new hooked_wallet_1.default({
                getAccounts: (cb) => __awaiter(this, void 0, void 0, function* () {
                    // const accountAddress = utils.privateKeyToAddress(this.adminPrivateKey)
                    const accountAddress = '0x925BFe6ebDC9171d4dECd8dCA8CB250A276Af39c';
                    cb(null, [accountAddress]);
                    return [accountAddress];
                }),
                approveTransaction: (txData, cb) => __awaiter(this, void 0, void 0, function* () {
                    cb(null, true);
                }),
                approveMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    cb(null, true);
                }),
                signMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const sig = yield utils.signWithPrivateKey(msgParams.data, this.adminPrivateKey, this.rpcUri);
                        cb(null, sig);
                        return sig;
                    }
                    catch (err) {
                        cb(err);
                    }
                }),
                signTransaction: (txData, cb) => __awaiter(this, void 0, void 0, function* () {
                    // TODO: best practices for min gas (21000)
                    if (web3Utils.toHex(txData.gas) === '0x5208') {
                        txData.gas = web3Utils.toHex(500000);
                    }
                    walletSubprovider.fillInTxExtras(txData, (err, txWithExtras) => __awaiter(this, void 0, void 0, function* () {
                        if (err) {
                            cb(err);
                            return false;
                        }
                        txWithExtras.gasPrice = web3Utils.toHex(txWithExtras.gasPrice);
                        txWithExtras.gas = utils.normalizeHex(txWithExtras.gas);
                        txWithExtras.gasPrice = utils.normalizeHex(txWithExtras.gasPrice);
                        txWithExtras.value = utils.normalizeHex(txWithExtras.value);
                        txWithExtras.data = utils.normalizeHex(txWithExtras.data);
                        try {
                            /*
                            const res = await this.authereum.signTransactionWithLoginKey(txWithExtras)
                
                            if (!res) {
                              cb(new Error('No transaction data returned'))
                              return
                            }
                
                            cb(null, res.signedTransactionData)
                            return res.signedTransactionData
                             */
                            cb(null, '0x');
                            return '0x';
                        }
                        catch (err) {
                            cb(err);
                            this.notifier.notify('error', err.message, { timeout: 5000 });
                        }
                    }));
                }),
                validateSender: (from, cb) => {
                    cb(null);
                },
                validateTransaction: (txParams, cb) => {
                    cb(null);
                },
                validateMessage: (msgParams, cb) => {
                    cb(null);
                },
                validatePersonalMessage: (msgParams, cb) => {
                    cb(null);
                },
                approvePersonalMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    cb(null, true);
                }),
                signPersonalMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const sig = yield utils.signWithPrivateKey(msgParams.data, this.adminPrivateKey, this.rpcUri);
                        cb(null, sig);
                        return sig;
                    }
                    catch (err) {
                        cb(err);
                    }
                })
            });
            _super.addProvider.call(this, walletSubprovider);
            this.rpcSubProvider = new rpc_1.default({
                rpcUrl: this.rpcUri
            });
            _super.addProvider.call(this, this.rpcSubProvider);
            // network connectivity error
            _super.on.call(this, 'error', (err) => {
                console.error(err.stack);
            });
            // start polling
            _super.start.call(this);
            this._blockTracker.removeAllListeners();
        });
    }
    enable() {
        return __awaiter(this, void 0, void 0, function* () {
            // todo
        });
    }
    disable() {
        return __awaiter(this, void 0, void 0, function* () {
            // todo
        });
    }
}
exports.default = AuthereumAdminKeyProvider;
