"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_private_key_to_address_1 = __importDefault(require("ethereum-private-key-to-address"));
const ethers = __importStar(require("ethers"));
exports.privateKeyToAddress = ethereum_private_key_to_address_1.default;
exports.wait = (t) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise(resolve => setTimeout(() => resolve(), t));
});
exports.normalizeHex = (hex, opts) => {
    let value = '';
    if (Buffer.isBuffer(hex)) {
        hex = hex.toString('hex');
    }
    if (typeof hex === 'number') {
        hex = hex.toString();
    }
    if (typeof hex === 'string') {
        value = hex.toLowerCase();
    }
    if (value.startsWith('0x')) {
        value = value.slice(2);
    }
    if (value === '') {
        value = '0';
    }
    const data = (value.length % 2) ? `0${value}` : value;
    if (Buffer.from(data, 'hex')) {
        value = data;
    }
    value = `0x${value}`;
    return value;
};
exports.signWithPrivateKey = (message, privateKey, providerUri) => __awaiter(void 0, void 0, void 0, function* () {
    if (!privateKey) {
        throw new Error('private key is required');
    }
    const provider = new ethers.providers.JsonRpcProvider(providerUri);
    const wallet = new ethers.Wallet(privateKey, provider);
    let data = message;
    if (message.startsWith('0x')) {
        data = ethers.utils.arrayify(message);
    }
    const signature = yield wallet.signMessage(data);
    const address = exports.privateKeyToAddress(privateKey);
    /*
    const verified = verifySignature(message, signature, address)
  
    if (!verified) {
      throw new Error('signature produced is invalid')
    }
     */
    return signature;
});
exports.debounce = (callback, time) => {
    let interval;
    return (...args) => {
        clearTimeout(interval);
        interval = setTimeout(() => {
            interval = null;
            callback(...args);
        }, time);
    };
};
exports.throttle = (fn, interval, limit = 1) => {
    const queue = new Map();
    let currentTick = 0;
    let activeCount = 0;
    const throttled = function (...args) {
        let timeout;
        return new Promise((resolve, reject) => {
            const execute = () => {
                resolve(fn.apply(this, args));
                queue.delete(timeout);
            };
            const now = Date.now();
            if ((now - currentTick) > interval) {
                activeCount = 1;
                currentTick = now;
                timeout = setTimeout(execute, currentTick - now);
            }
            else if (activeCount < limit) {
                activeCount++;
            }
            else {
                activeCount = 1;
            }
            queue.set(timeout, reject);
        });
    };
    return throttled;
};
