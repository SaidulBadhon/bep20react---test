"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bnc_notify_1 = __importDefault(require("bnc-notify"));
const config_1 = require("./config");
let instance = null;
class Notifier {
    constructor(opts) {
        opts = opts || {};
        const networkId = opts.networkId || 1;
        if (instance && instance.networkId === networkId) {
            this.notifier = instance;
        }
        else {
            instance = bnc_notify_1.default({
                dappId: config_1.blocknativeDappId,
                networkId
            });
            instance.networkId = networkId;
            this.notifier = instance;
        }
        this.notifier.config({
            darkMode: false,
            mobilePosition: 'bottom',
            desktopPosition: 'topRight',
            txApproveReminderTimeout: 20000,
            txStallPendingTimeout: 20000,
            txStallConfirmedTimeout: 90000
        });
        this.enabled = !opts.disableNotifications;
    }
    notify(kind, message, options = {}) {
        if (!this.enabled) {
            return {
                dismiss: () => {
                    // noop
                }
            };
        }
        if (typeof message !== 'string') {
            throw new Error('message must be a string');
        }
        const opts = {
            autoDismiss: options.timeout,
            message,
            type: kind,
            eventCode: 'notification'
        };
        if (/^0x[0-9a-f]+$/.test(message)) {
            return this.notifier.hash(message);
        }
        else {
            return this.notifier.notification(opts);
        }
    }
    enable(enabled) {
        this.enabled = enabled;
    }
}
exports.default = Notifier;
