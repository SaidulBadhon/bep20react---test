import EventEmitter from 'eventemitter3';
import AuthereumProvider from './AuthereumProvider';
export default class Authereum extends EventEmitter {
    private apiUri;
    private rpcUri;
    private webUri;
    private xsUri;
    private networkName;
    private networkId;
    private redirectUri;
    private provider;
    private iframeConnection;
    private childIframeConnection;
    private iframe;
    private notifier;
    private disableNotifications;
    private cachedLoginKeyAddress;
    private cachedAccountAddress;
    private cachedIsAuthenticated;
    private iframeReady;
    private cacheReady;
    private readyEmitted;
    private _widgetEnabled;
    private iframeStyle;
    private blockedPopupRedirect;
    private notificationsMap;
    constructor(config?: any);
    private setConfig;
    private setupCache;
    private resetCache;
    private setupNotifier;
    private setupResizeListener;
    private cacheLoginKeyAddress;
    private cacheAccountAddress;
    private cacheIsAuthenticated;
    login: (...args: any[]) => Promise<unknown>;
    authenticate(): Promise<unknown>;
    isAuthenticated(): Promise<any>;
    logout(): Promise<any>;
    getAuthenticatedAccount(): Promise<any>;
    getDappKey(): Promise<any>;
    getLoginKey(): Promise<any>;
    signWithDappKey: (...args: any[]) => Promise<unknown>;
    signWithLoginKey: (...args: any[]) => Promise<unknown>;
    signTypedMessageWithDappKey: (...args: any[]) => Promise<unknown>;
    signMessageWithAdminKey: (...args: any[]) => Promise<unknown>;
    getLoginKeyAuthSignature(): Promise<any>;
    getLoginKeyRestrictionData(): Promise<any>;
    getAccountAddress(): Promise<any>;
    getBalance(): Promise<any>;
    getRpcUri(): string;
    getNetworkId(): Promise<any>;
    getProvider(): AuthereumProvider;
    private handleError;
    signTransactionWithLoginKey: (...args: any[]) => Promise<unknown>;
    sendTransaction: (...args: any[]) => Promise<unknown>;
    isReady(): boolean;
    updateConfig(config: any): void;
    getConfig(): {
        apiUri: string;
        rpcUri: string;
        webUri: string;
        xsUri: string;
        networkName: string;
        networkId: any;
        disableNotifications: boolean;
    };
    showWidget(enabled?: boolean): boolean;
    hideWidget(): boolean;
    widgetEnabled(): boolean;
    private tilIframeReady;
    private tilReady;
    private emitReadyEvent;
    private connectToChildIframe;
    private getOrCreateIframe;
    private postVersionToChild;
    private postMessageToChild;
    private handlePostMessage;
    private handlePostMessageNotification;
    private handlePostMessageUpdateIdNotification;
    private handlePostMessageUpdateNotification;
    private handlePostMessageDismissNotification;
    private handlePostMessageLog;
    private getWindowSize;
    private getWindowWidth;
    private getWindowHeight;
    setIframePositionLeft(x: number): void;
    setIframeWidth(width: number): void;
    setIframeHeight(height: number): void;
    private refreshWidget;
    private loginKeyExists;
    private accountAddressExists;
    private getAccountAdminKeyNonce;
    private getAccountAuthKeyNonce;
    private executeLoginKeyMetaTx;
    private loadLoginKey;
    private getOrCreateLoginKey;
    private getAuthenticateUri;
    private getSignWithAdminKeyUri;
    private openPopupOrRedirect;
    private signLoginKeyRequest;
    private tilDomReady;
    version(): string;
}
