"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethers = __importStar(require("ethers"));
const AuthereumSDK_1 = __importDefault(require("./AuthereumSDK"));
class AuthereumSigner extends ethers.Signer {
    constructor(config) {
        super();
        this.config = config || {};
        this.authereum = new AuthereumSDK_1.default(this.config);
        this.provider = new ethers.providers.JsonRpcProvider(this.authereum.getRpcUri());
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.authereum.getAccountAddress();
        });
    }
    signMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.authereum.signWithDappKey(message);
        });
    }
    sendTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            const signedTx = yield this.sign(transaction);
            return this.provider.sendTransaction(signedTx);
        });
    }
    sign(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            transaction = yield this.fillInTxExtras(transaction);
            const tx = yield ethers.utils.resolveProperties(transaction);
            const res = yield this.authereum.signTransactionWithLoginKey(tx);
            return res.signedTransactionData;
        });
    }
    fillInTxExtras(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!tx.gas) {
                const gas = yield this.provider.estimateGas(tx);
                tx.gas = gas.toString();
            }
            if (!tx.gasPrice) {
                const gasPrice = yield this.provider.getGasPrice();
                tx.gasPrice = gasPrice.toString();
            }
            // TODO: best practices for min gas (21000)
            if (tx.gas === '21000') {
                tx.gas = `500000`;
            }
            if (tx.gas && typeof tx.gas !== 'string') {
                tx.gas = tx.gas.toString();
            }
            if (tx.gasPrice && typeof tx.gasPrice !== 'string') {
                tx.gasPrice = tx.gasPrice.toString();
            }
            if (tx.value && typeof tx.value !== 'string') {
                tx.value = tx.value.toString();
            }
            return tx;
        });
    }
}
exports.default = AuthereumSigner;
